{"version":3,"sources":["components/Addcategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["Addcategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFecthGifs","GifExpertApp","categories","setcategories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmB5C,OAEI,sBAAMC,SAbO,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAQV,SACI,uBAAOO,KAAK,OACRC,MAAOT,EACPU,SArBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCNbG,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,gDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAF,sDCARO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAGpB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAMkB,IAAKR,IACrB,4BAAIA,QCHHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAa,IAAD,EACVd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAwBpC,OAlBAC,qBAAU,WAET1B,EAAQC,GACP0B,MAAM,SAAAhB,GACJiB,YAAY,WACRH,EAAS,CACLjB,KAAMG,EACNY,SAAS,MAEf,UAKH,CAACtB,IAIGuB,EDlBwBK,CAAa5B,GAAhCa,EAJuB,EAI5BN,KAAae,EAJe,EAIfA,QAOpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAClDsB,GAAW,mBAAGJ,UAAU,mCAAb,uBACZ,qBAAKA,UAAU,YAAf,SAGQL,EAAOJ,KAAK,SAAAC,GAAG,OAEX,aAFoB,CAEnB,EAAD,eAEIA,GADCA,EAAIC,aEvBpBkB,EAAe,WAAM,MAGI3C,mBAAS,CAAC,cAHd,mBAGzB4C,EAHyB,KAGbC,EAHa,KAU9B,OACI,qCACE,gDACA,cAAC,EAAD,CAAa9C,cAAe8C,IAC5B,uBAEA,6BAKKD,EAAWrB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCfRgC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.c90cd165.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Addcategory = ({setCategories}) => {\r\n\r\nconst [inputValue, setinputValue] = useState('');\r\nconst handleInputChange = (e) => {\r\n    //console.log(e.target.value);\r\n    setinputValue(e.target.value);\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n  e.preventDefault();\r\n\r\n  if(inputValue.trim().length>2){\r\n    setCategories(cats => [inputValue,...cats]);\r\n    setinputValue('');\r\n  }\r\n  \r\n}\r\n\r\n\r\n    return (\r\n    \r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}/>\r\n        </form>\r\n          \r\n    )\r\n}\r\n\r\n// PropTypes basicamente valida los campos o propiedades\r\nAddcategory.propTypes = {\r\n     setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n export const getGifs =async( category ) => {\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=LB84Xm5XEOnTj9jjT5aGyXuC4obrnBuy`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log({id, title, url});\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url}  alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// Va a traer los Gif\r\nimport React /*, {useEffect, useState}*/ from 'react'\r\nimport { useFecthGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/GetGifs';\r\n import { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    // const [images, setimages] = useState([]);\r\n\r\n   const { data:images, loading} = useFecthGifs(category);\r\n\r\n  \r\n   \r\n    \r\n//    getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading..</p>}\r\n            <div className=\"card-grid\">\r\n                            \r\n                {\r\n                    images.map( img => (    // Destructuracion de images images.id, images.title\r\n                        //  <li key={id}>{title}</li>\r\n                        <GifGridItem\r\n                        key={img.id}\r\n                        {...img}/>\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport {useEffect, useState} from 'react';\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\nexport const useFecthGifs =(category)=> {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true \r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n     getGifs(category)\r\n     .then( img => {\r\n        setTimeout( ()=> {\r\n            setstate({\r\n                data: img,\r\n                loading: false \r\n             });\r\n        },2000);\r\n\r\n        \r\n     })\r\n\r\n    }, [category])\r\n\r\n   \r\n\r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport { Addcategory } from './components/Addcategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n// const categories =['One Punch', 'Samurai X', 'Dragon Ball'];\r\n  const [categories, setcategories] = useState(['One Punch']);\r\n\r\n//   const handleAdd = () => {\r\n//      //setcategories([...categories,'HunterxHunter']);\r\n//      setcategories(cats => [...categories,'HunterxHunter']);\r\n//   }\r\n\r\n    return (\r\n        <>\r\n          <h2>Gif Expert App</h2>\r\n          <Addcategory setCategories={setcategories}/>\r\n          <hr/>  \r\n          \r\n          <ol>\r\n             {\r\n               //   categories.map( category => {\r\n               //      return <li key={category}> {category}</li>\r\n               //   })\r\n               categories.map( category => (\r\n                  <GifGrid \r\n                  key={category}\r\n                  category={category} />\r\n               ))\r\n             }\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}